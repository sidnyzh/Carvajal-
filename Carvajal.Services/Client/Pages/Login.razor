@page "/Login"
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IToastService toastService

<h3>Login</h3>


<EditForm Model="@usuario" OnSubmit="HandleLogin">
    <div class="container-fluid">
        <div class="form-group row mb-1">
            <label class="col-sm-3">Nombre</label>
            <div class="col-sm-8">
                <InputText class="form-control" @bind-Value="@usuario.Nombre"></InputText>
            </div>
        </div>
        <div class="form-group row mb-1">
            <label class="col-sm-3">Password</label>
            <div class="col-sm-8">
                <InputText type="password" class="form-control" @bind-Value="@usuario.Password"></InputText>
            </div>
        </div>
        <center>
            <button type="submit" class="btn btn-primary">Entrar</button>
            <button @onclick="CrearCuenta">Crear Usuario</button>
        </center>
    </div>
</EditForm>




@code {
    Usuario usuario = new();

    async Task HandleLogin()
    {
        var result = await Http.PostAsJsonAsync("api/Usuario", usuario);
        var exitoso = result.IsSuccessStatusCode;
        if (exitoso)
        {
            var response = await result.Content.ReadFromJsonAsync<Response<string>>();
            await LocalStorage.SetItemAsync("token", response.Data);
            await AuthStateProvider.GetAuthenticationStateAsync();
            this.toastService.ShowSuccess(response.Message, "Exitoso");
            NavigationManager.NavigateTo("/");
        }
        else 
        {
            var response = await result.Content.ReadFromJsonAsync<Response<string>>();
            this.toastService.ShowError(response.Message, "Error");
        }
    }

    void CrearCuenta()
    {
        NavigationManager.NavigateTo("/CrearCuenta");
    }
}